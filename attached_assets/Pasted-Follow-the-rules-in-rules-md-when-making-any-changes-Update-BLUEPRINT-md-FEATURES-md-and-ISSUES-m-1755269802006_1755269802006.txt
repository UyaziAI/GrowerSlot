Follow the rules in rules.md when making any changes. Update BLUEPRINT.md, FEATURES.md, and ISSUES.md as required by the rules. Maintain a changelog entry in BLUEPRINT.md.

Mode: RECONCILE (do not scaffold new UI files)
Goal: Make /admin a functional calendar per the Admin blueprint (outlined in Admin_Addendum.md in the root directory) by integrating existing components. Modify only:

/app/frontend/src/pages/AdminPage.tsx

/app/frontend/src/__tests__/admin_calendar_behaviour.spec.tsx (new test is allowed)

Precheck (must run first):

Verify these files already exist:

/app/frontend/src/pages/DayPeekSheet.tsx

/app/frontend/src/pages/DayEditorSheet.tsx

/app/frontend/src/pages/BulkBar.tsx

/app/frontend/src/pages/SlotSheet.tsx

If any are missing, abort with no code changes and write reports/admin_reconcile_blockers.md listing the missing files and import names. Do not create stubs.

Implementation (AdminPage.tsx only):

State & header (keep existing header testids):

Add state:

const [view, setView] = useState<'month'|'week'|'day'>('month');
const [focusedDate, setFocusedDate] = useState<string>(todayISO()); // Africa/Johannesburg
const [selectMode, setSelectMode] = useState(false);
const [selectedDates, setSelectedDates] = useState<string[]>([]);
const [peek, setPeek] = useState<{dateISO:string, summary: DayPeekSummary} | null>(null);
const [editDay, setEditDay] = useState<string | null>(null);
const [slotSheet, setSlotSheet] = useState<{id:string, capacity:number, remaining:number, notes?:string, blackout?:boolean} | null>(null);


Keep right-side header buttons exactly: Create ▾ (data-testid=admin-header-create) and More ▾ (admin-header-more).

Add a “Select days” toggle in the toolbar to control selectMode.

Calendar grid (inline, no new files):

Implement a Month grid that always renders 42 cells (startOfCalendar to endOfCalendar). Days from prev/next month should be visibly muted but clickable.

Implement minimal Week (7 columns) and Day (vertical list) views; empty is fine—do not fabricate slots.

Day click (Month/Week): setPeek({ dateISO, summary: { remaining:0, booked:0, blackout:false, restricted:false }}).

If selectMode is true, the same click toggles the day in selectedDates (no Peek).

Integrate existing components (use imports, no new files):

Import and render:

import DayPeekSheet, { DayPeekSummary } from './DayPeekSheet';
import DayEditorSheet from './DayEditorSheet';
import BulkBar from './BulkBar';
import SlotSheet from './SlotSheet';


DayPeekSheet: pass handlers

onCreateDay: open your existing day-create dialog (or TODO comment)

onBlackoutDay: call POST /v1/slots/blackout for peek.dateISO (day scope), then refetch visible range

onRestrictDay: call POST /v1/restrictions/apply (day scope), then refetch

onOpenEditor: setEditDay(peek.dateISO)

onOpenDayView: setView('day'); setFocusedDate(peek.dateISO)

onClose: setPeek(null)

DayEditorSheet: when editDay is set, render with:

onToggleBlackout(next): POST/PATCH blackout for that day, then refetch

onQuickCreate({slot_length_min, capacity, notes}): POST /v1/slots/bulk with start=end=editDay and the day’s ISO weekday; on success, refetch; on 422, show json.error inline (no generic 500)

onClose: setEditDay(null)

BulkBar: render when selectedDates.length>0 with actions:

Create Range → POST /v1/slots/bulk across min..max selected dates & selected weekdays; refetch

Blackout Selected → POST /v1/slots/blackout for the date list; refetch

Restrict Selected → POST /v1/restrictions/apply (day scope); refetch

Duplicate from… → leave TODO; not required for acceptance

Done → setSelectMode(false); setSelectedDates([])

SlotSheet (Day view):

Add a simple “+” button in Day view to open a create dialog (time, length, capacity, notes) → POST /v1/slots/bulk for one slot on focusedDate; refetch

Clicking a slot chip in Day view: setSlotSheet({ id, capacity, remaining, notes, blackout })

In SlotSheet: onToggleBlackout(next) → PATCH /v1/slots/{id}/blackout; onRestrict() → POST /v1/restrictions/apply (slot scope); onDelete() → DELETE if empty; on success, refetch and close

Networking (inline):

Use fetch inline in AdminPage.tsx for the calls above (no new helpers).

On error, read await res.json() and show json.error verbatim in the dialog/sheet; never a generic “Internal Server Error”.

After any success, invalidate/refetch the current visible range (keep your existing query or do a minimal refetch inside AdminPage).

Guardrails:

All date inputs must have min = today (Africa/Johannesburg). Disable submit and show “Start date cannot be in the past.” if violated.

Never render placeholder/“fake” slots—only what the backend returns.

Test (new, allowed): /app/frontend/src/__tests__/admin_calendar_behaviour.spec.tsx

Renders Admin header with testids admin-header-create and admin-header-more

Month shows 42 day cells; clicking a day opens DayPeekSheet

Clicking Edit Day opens DayEditorSheet

Toggling selection mode and selecting 3 days shows BulkBar

Mock 422 {error:"start_date cannot be in the past"} on bulk create; assert that exact text renders and submit is disabled

Docs:

BLUEPRINT.md changelog: “Admin Calendar — Reconcile & Wire V1 (no-new-files)”

FEATURES.md: move “Admin calendar core UX” to Implemented (V1) with note “data badges & inspector polish pending”

ISSUES.md: add “Admin calendar V1 follow-ups” checklist (week ribbon, inspector polish, template preview, E2E CI)

Acceptance (all must be true):

No new UI files created besides the one test.

/admin shows a Month calendar with 42 cells.

Day click → Day Peek opens; “Edit Day” → Day Editor opens.

Selection mode → selecting multiple days shows **Bulk