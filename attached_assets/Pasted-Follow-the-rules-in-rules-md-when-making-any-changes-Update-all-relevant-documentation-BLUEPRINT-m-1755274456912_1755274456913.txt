Follow the rules in rules.md when making any changes. Update all relevant documentation (BLUEPRINT.md, FEATURES.md, ISSUES.md) as required by the rules. Maintain changelog entries in BLUEPRINT.md for every change.

Context (active FE root)

Vite serves the root app (index.html → /src/main.tsx). Modify only src/**. Do not touch app/frontend/**.

Changes (do exactly these, in order)

Create src/lib/auth.ts

export type Role = 'admin' | 'grower';

const STORAGE_KEY = 'auth';

export function getAuth(): { token?: string; role?: Role } {
  try { return JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}'); }
  catch { return {}; }
}

export function isAuthenticated(): boolean {
  return !!getAuth().token;
}

export function role(): Role | null {
  return (getAuth().role ?? null) as Role | null;
}

export function login(token: string, r: Role) {
  localStorage.setItem(STORAGE_KEY, JSON.stringify({ token, role: r }));
}

export function logout() {
  localStorage.removeItem(STORAGE_KEY);
}


Create src/components/AppShell.tsx

import React from 'react';
import { Link, useRoute } from 'wouter';
import { logout, role } from '../lib/auth';

export default function AppShell({ children }: { children: React.ReactNode }) {
  const [isAdmin] = useRoute('/admin');
  const [isGrower] = useRoute('/grower');
  const r = role();

  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      <header className="sticky top-0 z-50 bg-white border-b">
        <div className="mx-auto max-w-screen-xl px-3 py-2 flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Link href="/"><a className="font-semibold">GrowerSlot</a></Link>
            <nav className="hidden sm:flex items-center gap-2 text-sm">
              <Link href="/admin">
                <a className={`px-2 py-1 rounded ${isAdmin ? 'bg-gray-900 text-white' : 'hover:bg-gray-100'}`}>Admin</a>
              </Link>
              <Link href="/grower">
                <a className={`px-2 py-1 rounded ${isGrower ? 'bg-gray-900 text-white' : 'hover:bg-gray-100'}`}>Grower</a>
              </Link>
            </nav>
          </div>
          <div className="flex items-center gap-2">
            <span className="text-xs text-gray-500 hidden sm:inline">role: {r ?? 'guest'}</span>
            <button
              onClick={() => { logout(); window.location.href = '/login'; }}
              className="px-3 py-1 rounded border hover:bg-gray-100"
              aria-label="Logout"
            >
              Logout
            </button>
          </div>
        </div>
      </header>
      <main className="flex-1 mx-auto w-full max-w-screen-xl px-3 py-4">
        {children}
      </main>
    </div>
  );
}


Create src/pages/LoginPage.tsx

import React, { useState } from 'react';
import { login } from '../lib/auth';

export default function LoginPage() {
  const [r, setR] = useState<'admin'|'grower'>('grower');
  const [t, setT] = useState('');

  return (
    <div className="min-h-[60vh] grid place-items-center">
      <form
        onSubmit={(e) => {
          e.preventDefault();
          login(t || 'dev', r);
          window.location.href = r === 'admin' ? '/admin' : '/grower';
        }}
        className="w-full max-w-sm bg-white border rounded-xl p-4 space-y-3"
      >
        <h1 className="text-lg font-semibold">Sign in</h1>

        <label className="block text-sm">Role</label>
        <select className="w-full border rounded p-2" value={r} onChange={e => setR(e.target.value as any)}>
          <option value="grower">Grower</option>
          <option value="admin">Admin</option>
        </select>

        <label className="block text-sm">Token</label>
        <input className="w-full border rounded p-2" value={t} onChange={e => setT(e.target.value)} placeholder="(dev token)"/>

        <button className="w-full bg-black text-white rounded p-2">Continue</button>
      </form>
    </div>
  );
}


Update (replace contents) src/App.tsx
Use wouter with component={...} and wrap private pages in the shell. Keep your existing src/pages/grower-dashboard.tsx and src/pages/AdminPage.tsx internals untouched.

import React, { useEffect } from 'react';
import { Route, useLocation } from 'wouter';
import AppShell from './components/AppShell';
import LoginPage from './pages/LoginPage';
import AdminPage from './pages/AdminPage';
import GrowerPage from './pages/grower-dashboard';
import { isAuthenticated, role } from './lib/auth';

function Redirect({ to }: { to: string }) {
  const [, setLocation] = useLocation();
  useEffect(() => { setLocation(to); }, [setLocation, to]);
  return null;
}

function Private({ component: C, allow }: { component: React.ComponentType<any>, allow: 'admin'|'grower'|'any' }) {
  if (!isAuthenticated()) return <Redirect to="/login" />;
  const r = role();
  if (allow !== 'any' && r !== allow) return <Redirect to={r === 'admin' ? '/admin' : '/grower'} />;
  return <AppShell><C /></AppShell>;
}

export default function App() {
  return (
    <>
      {/* Public */}
      <Route path="/login" component={LoginPage} />
      {/* Role landings */}
      <Route path="/admin" component={() => <Private component={AdminPage} allow="admin" />} />
      <Route path="/grower" component={() => <Private component={GrowerPage} allow="grower" />} />
      {/* Root redirect */}
      <Route path="/" component={() => {
        if (!isAuthenticated()) return <Redirect to="/login" />;
        return <Redirect to={role() === 'admin' ? '/admin' : '/grower'} />;
      }} />
    </>
  );
}

Tests (add exactly one)

Create src/__tests__/app_shell.spec.tsx

import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import AppShell from '../components/AppShell';

describe('AppShell header', () => {
  it('shows brand, nav links, and logout', () => {
    render(<AppShell><div>child</div></AppShell>);
    expect(screen.getByText('GrowerSlot')).toBeInTheDocument();
    expect(screen.getByText('Admin')).toBeInTheDocument();
    expect(screen.getByText('Grower')).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /logout/i })).toBeInTheDocument();
  });
});

Documentation updates (do all)

BLUEPRINT.md → add changelog line:
YYYY-MM-DD — UI-SHELL Reconcile (root /src): restored global header, logout, login route; wrapped Admin/Grower pages; mobile-friendly container.

FEATURES.md → mark “Global shell + auth routing” as Implemented (root /src).

ISSUES.md → add follow-up checklist:

 Replace AppShell with brand header component if/when provided

 Responsive hamburger menu for small screens

 Tenant switcher (if required)

 Hook real auth in place of localStorage stub

Acceptance (must all be true)

A top bar (brand, Admin/Grower tabs, Logout button) is visible on /admin and /grower.

/login route exists and works; after sign-in you land on /admin or /grower based on role selection.

/admin and /grower render inside the shell; page content is padded and constrained (mobile-friendly).

Routing uses wouter with component={...} (no <Route element=...> anywhere).

No changes to src/pages/AdminPage.tsx or src/pages/grower-dashboard.tsx internals (only wrapped by the shell).