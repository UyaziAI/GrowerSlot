Follow the rules in rules.md when making any changes. Update all relevant documentation (BLUEPRINT.md, FEATURES.md, ISSUES.md) as required by the rules. Maintain changelog entries in BLUEPRINT.md for every change.

Context (files to modify and print in full)

client/src/features/booking/components/DayTimeline.tsx

client/src/features/booking/components/DayPill.tsx

client/src/pages/calendar-page.tsx (only if you adjust container padding there)

client/src/components/ui/card.tsx (print only; don’t change unless absolutely required)

tailwind.config.ts (print only; don’t change unless absolutely required)

Goal

Fix the day scroller’s vertical clipping once and for all while preserving the look:

Center pill is largest.

Immediate left/right (“flanks”) are slightly larger.

All other pills are smaller.

We do keep transform‑scale on the highlighted center pill (and optionally flanks), but we guarantee enough vertical rail height so nothing gets clipped at the top or bottom — including Tailwind rings and shadows — with even top/bottom padding and perfect vertical centering.

Non‑negotiable acceptance criteria

No clipping at any zoom level (90%–125%) in Chromium/WebKit/Gecko.

PaddingTop === PaddingBottom on the scroll viewport.

Pills vertically centered in the scroll lane, regardless of selected/hover/focus states.

Transform scaling retained for the center pill (and optional subtle scaling for flanks).

Overflow‑visible chain remains intact from pill up through the scroll lane.

Print the full, updated source of all files listed in Context (even if unchanged).

Why it still clips (root cause to respect in the fix)

Scaling with CSS transforms increases the pill’s visual size beyond its layout box. Tailwind ring-* and shadows are drawn outside the element’s box. If the rail height equals the unscaled (layout) size, any scale/ring will appear clipped. We must size the item track to the max visual height of the biggest pill after scale + ring + safety.

Implementation plan (make these exact edits)
1) DayTimeline: compute “track height” from constants and use it everywhere

In DayTimeline.tsx, define these constants near the top (tune as needed but start here):

// Visual sizing constants (px)
const PILL_BASE = 64;         // small
const PILL_MID = 72;          // flank baseline (before scale)
const PILL_CENTER = 88;       // selected baseline (before scale)
const SCALE_CENTER = 1.06;    // center visual scale (keep!)
const SCALE_FLANK = 1.03;     // optional flank scale
const RING_SELECTED = 4;      // Tailwind ring-4 (px)
const SAFETY = 6;             // extra headroom for subpixel/shadow

// Max visual height = biggest (scaled size + double ring) + safety
const VISUAL_CENTER = Math.ceil(PILL_CENTER * SCALE_CENTER) + (RING_SELECTED * 2);
const ITEM_TRACK = VISUAL_CENTER + SAFETY; // e.g. ~108px

// Even padding top/bottom for the scroll lane (px)
const RAIL_PAD_Y = 16; // exact same on top and bottom

// Rail/container heights
const RAIL_MIN_HEIGHT = ITEM_TRACK + (RAIL_PAD_Y * 2); // e.g. 108 + 32 = 140px


Apply these values via inline style objects on the relevant wrappers:

Root lane container: minHeight: RAIL_MIN_HEIGHT, overflow: 'visible'.

Scroll container: height: RAIL_MIN_HEIGHT, paddingTop: RAIL_PAD_Y, paddingBottom: RAIL_PAD_Y, overflowX: 'auto', overflowY: 'visible'.

Virtual row / item wrapper(s): height: ITEM_TRACK, alignItems: 'center', overflow: 'visible'.

Remove any hard‑coded 88px heights and replace with ITEM_TRACK.

Ensure className includes items-center and overflow-visible consistently.

2) DayPill: reserve space; scale only the inner “core”

Keep your current paddings that produce 64/72/88 px layout sizes.

Wrap the pill’s content in an inner div (e.g., <div className="pill-core">) that receives the motion scale animations. The outer button keeps its layout size (64/72/88); the inner core is what scales.

<motion.button ... className="relative flex items-center justify-center overflow-visible">
  <motion.div
    className="pill-core overflow-visible"
    style={{ transformOrigin: 'center center' }}
    animate={{ scale: isCenter ? SCALE_CENTER : isFlank ? SCALE_FLANK : 1 }}
    transition={{ duration: 0.15 }}
  >
    {/* existing pill content */}
  </motion.div>
</motion.button>


Keep ring-* classes on the outer button (so layout is predictable), but we accounted for the ring in ITEM_TRACK anyway.

Do not use additional whileHover scaling that exceeds the chosen SCALE_CENTER/SCALE_FLANK. If you keep hover/tap micro‑scales, cap them so scale never exceeds SCALE_CENTER or adjust ITEM_TRACK accordingly.

3) Ensure the overflow chain is clean

Confirm each wrapper uses overflow-visible (no overflow-hidden in the ancestor chain of the pills). Keep horizontal scrolling on the lane with overflow-x-auto, but force overflow-y-visible on that element.

4) Make padding perfectly even

In the scroll container, set:

style={{ paddingTop: RAIL_PAD_Y, paddingBottom: RAIL_PAD_Y }}


Do not override this elsewhere. No pt-*/pb-* Tailwind that breaks parity.

5) (Optional but recommended) Add a guard for future scale tweaks

Add a runtime dev warning in DayTimeline.tsx:

if (import.meta.env.DEV) {
  const maxPlanned = Math.ceil(PILL_CENTER * SCALE_CENTER) + (RING_SELECTED * 2);
  if (ITEM_TRACK < maxPlanned) {
    // eslint-disable-next-line no-console
    console.warn('[DayTimeline] ITEM_TRACK too small for planned scale/ring', { ITEM_TRACK, maxPlanned });
  }
}

Tests / QA hooks

Add a data-testid="timeline-rail" on the scroll container and data-testid="pill-selected" for the selected pill.

In a quick Playwright test (e2e/timeline.spec.ts), navigate to Calendar, center on today, and assert:

const rail = page.getByTestId('timeline-rail');
const selected = page.getByTestId('pill-selected');
const railBox = await rail.boundingBox();
const selBox = await selected.boundingBox();
expect(selBox!.y).toBeGreaterThanOrEqual(railBox!.y + 1); // not clipped at top
expect(selBox!.y + selBox!.height).toBeLessThanOrEqual(railBox!.y + railBox!.height - 1); // not clipped at bottom


Print a grep for any rogue overflow-hidden inside the booking/timeline components after changes (do not fail if found elsewhere in the app):

// pseudo: search results, not code changes
SEARCH: "overflow-hidden" under client/src/features/booking/components

Documentation & tracking (per rules.md)

BLUEPRINT.md:

Add a one‑line changelog entry under a “UI/UX Notes” or Changelog section:
“Day scroller rail height now derives from max visual pill size (scaled + ring) to prevent clipping; even vertical padding enforced.”

FEATURES.md:

Under “Grower booking interface” → Testing column, add note: “Visual clipping tests added for timeline pills.”

ISSUES.md:

If a prior clipping issue existed, mark it Resolved with today’s date and a brief note.

Output requirements (very important)

Print the complete, updated source of:

client/src/features/booking/components/DayTimeline.tsx

client/src/features/booking/components/DayPill.tsx

client/src/pages/calendar-page.tsx (even if unchanged, for padding parity verification)

client/src/components/ui/card.tsx (print only)

tailwind.config.ts (print only)

Include a short snippet in the console/log section confirming computed numbers:
{ PILL_BASE, PILL_MID, PILL_CENTER, SCALE_CENTER, RING_SELECTED, ITEM_TRACK, RAIL_MIN_HEIGHT, RAIL_PAD_Y }.

Show the SEARCH results for overflow-hidden under client/src/features/booking/components after the change.

Success definition (what I will manually check)

The center pill remains visually larger (true transform scale ≈ 1.06).

Flanks are slightly larger (≈ 1.03) if enabled.

No pill is clipped at top or bottom at 90%–125% zoom in Chrome/Firefox/Safari.

The scroll lane shows equal top/bottom padding (exact px parity).

The rail height and virtualized row height match RAIL_MIN_HEIGHT and ITEM_TRACK.

Please implement exactly as above and then print all the files in full.